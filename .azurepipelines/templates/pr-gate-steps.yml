## @file
# File templates/pr-gate-steps.yml
#
# template file containing the steps to build
#
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

parameters:
  tool_chain_tag: ''
  build_pkgs: ''
  build_targets: ''
  build_archs: ''
  has_ci_dependencies: false    # MU_CHANGE - Enable toggle for stuart_ci_build
  extra_steps: []               # MU_CHANGE - needed for clang

steps:
- checkout: self
  clean: true
  # fetchDepth: 1   # MU_CHANGE

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.8.x'
    architecture: 'x64'

- script: pip install -r pip-requirements.txt --upgrade
  displayName: 'Install/Upgrade pip modules'

# Set default
- bash: |
    echo "##vso[task.setvariable variable=pkgs_to_build]${{ parameters.build_pkgs }}"
    echo "##vso[task.setvariable variable=pkg_count]${{ 1 }}"

# MU_CHANGE [BEGIN] - this doesn't work on devops repos
# Fetch the target branch so that pr_eval can diff them.
# Seems like azure pipelines/github changed checkout process in nov 2020.
#- script: git fetch origin $(System.PullRequest.targetBranch)
#  displayName: fetch target branch
# MU_CHANGE [END]

# MU_CHANGE [BEGIN] - Workaround an azure pipelines bug.
# $System.PullRequest.targetBranch looks like "dev/whatever" on GitHub,
# but looks like "refs/heads/dev/whatever" on DevOps. The DevOps version
# can't be used for comparison for the PR Eval.
- powershell:
    $TargetBranch = "$(System.PullRequest.targetBranch)".replace('refs/heads/', '');
    Write-Host "##vso[task.setvariable variable=pr_compare_branch]origin/$TargetBranch";
  displayName: Workaround for Branch Names
  condition: eq(variables['Build.Reason'], 'PullRequest')
# MU_CHANGE [END]

# trim the package list if this is a PR
- task: CmdLine@1
  displayName: Check if ${{ parameters.build_pkgs }} need testing
  inputs:
    filename: stuart_pr_eval
    # MU_CHANGE - Workaround an azure pipelines bug.
    arguments: -c .pytool/CISettings.py -p ${{ parameters.build_pkgs }} --pr-target $(pr_compare_branch) --output-csv-format-string "##vso[task.setvariable variable=pkgs_to_build;isOutpout=true]{pkgcsv}" --output-count-format-string "##vso[task.setvariable variable=pkg_count;isOutpout=true]{pkgcount}"
  condition: eq(variables['Build.Reason'], 'PullRequest')

# install spell check prereqs
- template: spell-check-prereq-steps.yml

# MU_CHANGE - Add MarkdownLint
# install markdownlint check prereqs
- template: markdownlint-check-prereq-steps.yml


# MU_CHANGE - [start] need support for extra steps for clang
# Extra steps if needed
- ${{ parameters.extra_steps }}
# MU_CHANGE [end]


# Build repo
# MU_CHANGE - We use CI dependencies as well as submodules.
- task: CmdLine@1
  displayName: Dependency Setup ${{ parameters.build_pkgs }} ${{ parameters.build_archs}}
  inputs:
    filename: stuart_ci_setup
    arguments: -c .pytool/CISettings.py -p $(pkgs_to_build) --force-git -t ${{ parameters.build_targets}} -a ${{ parameters.build_archs}} TOOL_CHAIN_TAG=${{ parameters.tool_chain_tag}}
  condition: and(gt(variables.pkg_count, 0), succeeded(), eq('${{ parameters.has_ci_dependencies }}', 'true'))

# Build repo
- task: CmdLine@1
  displayName: Setup ${{ parameters.build_pkgs }} ${{ parameters.build_archs}}
  inputs:
    filename: stuart_setup
    arguments: -c .pytool/CISettings.py -p $(pkgs_to_build) -t ${{ parameters.build_targets}} -a ${{ parameters.build_archs}} TOOL_CHAIN_TAG=${{ parameters.tool_chain_tag}}
  condition: and(gt(variables.pkg_count, 0), succeeded())

- task: CmdLine@1
  displayName: Update ${{ parameters.build_pkgs }} ${{ parameters.build_archs}}
  inputs:
    filename: stuart_update
    arguments: -c .pytool/CISettings.py -p $(pkgs_to_build) -t ${{ parameters.build_targets}} -a ${{ parameters.build_archs}} TOOL_CHAIN_TAG=${{ parameters.tool_chain_tag}}
  condition: and(gt(variables.pkg_count, 0), succeeded())

# MU_CHANGE [BEGIN] - We use binary BaseTools
# build basetools
#   do this after setup and update so that code base dependencies
#   are all resolved.
# - template: basetools-build-steps.yml
#   parameters:
#     tool_chain_tag: ${{ parameters.tool_chain_tag }}
# MU_CHANGE [END]

- task: CmdLine@1
  displayName: Build and Test ${{ parameters.build_pkgs }} ${{ parameters.build_archs}}
  inputs:
    filename: stuart_ci_build
    arguments: -c .pytool/CISettings.py -p $(pkgs_to_build) -t ${{ parameters.build_targets}} -a ${{ parameters.build_archs}} TOOL_CHAIN_TAG=${{ parameters.tool_chain_tag}}
  condition: and(gt(variables.pkg_count, 0), succeeded())

# Publish Test Results to Azure Pipelines/TFS
- task: PublishTestResults@2
  displayName: 'Publish junit test results'
  continueOnError: true
  condition: and( succeededOrFailed(),gt(variables.pkg_count, 0))
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
    testResultsFiles: 'Build/TestSuites.xml'
    #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
    mergeTestResults: true # Optional
    testRunTitle: $(System.JobName) # Optional
    #buildPlatform: # Optional
    #buildConfiguration: # Optional
    publishRunAttachments: true # Optional

# Publish Test Results to Azure Pipelines/TFS
- task: PublishTestResults@2
  displayName: 'Publish host based test results for $(System.JobName)'
  continueOnError: true
  condition: and( succeededOrFailed(), gt(variables.pkg_count, 0))
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
    testResultsFiles: 'Build/**/*.result.xml'
    #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
    mergeTestResults: false # Optional
    testRunTitle: ${{ parameters.build_pkgs }} # Optional
    #buildPlatform: # Optional
    #buildConfiguration: # Optional
    publishRunAttachments: true # Optional

# Copy the build logs to the artifact staging directory
- task: CopyFiles@2
  displayName: "Copy build logs"
  inputs:
    targetFolder: '$(Build.ArtifactStagingDirectory)'
    SourceFolder: 'Build'
    contents: |
      BUILDLOG_*.txt
      BUILDLOG_*.md
      CI_*.txt
      CI_*.md
      CISETUP.txt
      SETUPLOG.txt
      UPDATE_LOG.txt
      PREVALLOG.txt
      TestSuites.xml
      **/BUILD_TOOLS_REPORT.html
      **/OVERRIDELOG.TXT
    flattenFolders: true
  condition: succeededOrFailed()

# Publish build artifacts to Azure Artifacts/TFS or a file share
- task: PublishBuildArtifacts@1
  continueOnError: true
  displayName: "Publish build logs"
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'Build Logs $(System.JobName)'
  condition: succeededOrFailed()
